---

- name: Create config dir
  file: path={{ config_dir }} state=directory

- name: Create work types and tags config file
  template:
    src: worktype_tag_config.yaml.j2
    dest: "{{ config_dir }}/worktype_tag_config.yaml"
  register: worktype_tag_config

- name: Create application config file
  template: src=django_config_env.j2
            dest={{ django_path }}/{{ django_project_name }}/.env
            backup=yes
  notify: restart application

- name: Install packages required by the Django app inside virtualenv
  pip: virtualenv={{ virtualenv_path }} requirements={{ requirements_file }}

- name: Run Django database migrations
  django_manage:
    command: migrate
    app_path: "{{ django_path }}"
    virtualenv: "{{ virtualenv_path }}"
  environment: "{{ django_environment }}"
  tags: django.migrate

- name: Run Django collectstatic
  django_manage:
    command: collectstatic --link --noinput
    app_path: "{{ django_path }}"
    virtualenv: "{{ virtualenv_path }}"
  environment: "{{ django_environment }}"
  tags: django.collectstatic

- name: Run createworktypes and createtags commands
  django_manage:
    command: "{{ item }} {{ config_dir }}/worktype_tag_config.yaml"
    app_path: "{{ django_path }}"
    virtualenv: "{{ virtualenv_path }}"
  with_items:
    - createworktypes
    - createtags
  environment: "{{ django_environment }}"
  when: worktype_tag_config.changed

- name: Create default user
  django_manage:
    command: shell -c "from django.contrib.auth import get_user_model; User=get_user_model(); User.objects.count()==0 or exit(); user=User.objects.create_user('{{ django_default_user_name }}', password='{{ django_default_user_password }}'); user.is_superuser=True; user.is_staff=True;user.save()"
    app_path: "{{ django_path }}"
    virtualenv: "{{ virtualenv_path }}"
  environment: "{{ django_environment }}"
  tags: createdefaultuser
